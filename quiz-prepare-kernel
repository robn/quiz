#!/usr/bin/env bash

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# Copyright (c) 2023, Rob Norris <robn@despairlabs.com>

set -uo pipefail

usage() {
  cat <<EOF
compile a kernel optimised for the quiz microvm
usage: quiz-prepare-kernel [opts]

options:
  -k <kernel>     kernel to build
                    (can be used multiple times)
  -e/-d/-m <key>  set kernel config key to enable/disable/module (Y/N/M)
                    (can be used multiple times)
  -u              update standard config for this kernel minor version
  -L              build with LLVM/Clang
  -C              don't install kernel config before build
  -B              don't build kernel
  -h              this help
EOF
  exit 1
}

trace() {
  local STAMP=$(date +%Y%m%d-%H:%M:%S)
  echo "[quiz-prepare-kernel] $STAMP $@" >&2
}

fail() {
  trace "FATAL $@"
  exit 1
}
trap fail ERR


RUNDIR=$(realpath $(dirname $0))
source $RUNDIR/quiz-config
source $RUNDIR/quiz-lib

opt_kernel=""
opt_no_config=""
opt_no_build=""
opt_llvm=""
opt_update_config=""
opt_modify_config=""

OPTIND=1
while getopts "k:CBe:d:m:uLh" opt
do
  case "$opt" in
    'k') opt_kernel="$opt_kernel $OPTARG" ;;
    'C') opt_no_config=1 ;;
    'B') opt_no_build=1 ;;
    'e') opt_modify_config="$opt_modify_config -e $OPTARG" ;;
    'd') opt_modify_config="$opt_modify_config -d $OPTARG" ;;
    'm') opt_modify_config="$opt_modify_config -m $OPTARG" ;;
    'u') opt_update_config=1 ;;
    'L') opt_llvm=1 ;;
    'h') usage ;;
    *) exit 1 ;;
  esac
done
shift $(expr $OPTIND - 1)

cd $RUNDIR

if [[ -z $opt_kernel ]] ; then
  fail "required kernel version arg -k not found"
fi

makeopts=""
if [[ -n $opt_llvm ]] ; then
  IFS=:
  best_clang=$(find $PATH -maxdepth 1 -executable -name "clang-??" -print | \
    sed -Ee 's/^.+-//' | sort -r | head -1)
  unset IFS
  if [[ -z "$best_clang" ]] ; then
    trace "no specific clang found, setting LLVM=1"
    best_clang=1
  else
    trace "found clang-$best_clang, setting LLVM=-$best_clang"
    best_clang="-$best_clang"
  fi
  makeopts="$makeopts LLVM=$best_clang"
fi

for kver in $opt_kernel ; do
  QUIZ_KERNEL_VERSION=$kver
  quiz_explode_kernel_version

  trace "preparing build: $_quiz_kver"

  mkdir -p build
  if [[ -d build/kernel/linux-$_quiz_ksrcver ]] ; then
    trace "using existing source dir: build/kernel/linux-$_quiz_ksrcver"
  else
    trace "setting up for build in: build/kernel/linux-$_quiz_ksrcver"
    mkdir -p build/kernel
    pushd build/kernel > /dev/null
    if [[ -f $_quiz_ktar ]] ; then
      trace "using existing tarball: $_quiz_ktar"
    else
      trace "downloading: $_quiz_kurl"
      curl -fOL $_quiz_kurl
    fi
    tar xf$_quiz_kzopt $_quiz_ktar
    popd > /dev/null
  fi

  kcfg=config-$_quiz_kmajor.$_quiz_kminor
  if [[ ! -f kernel/$kcfg ]] ; then
    kcfg=$(ls kernel/config-$_quiz_kmajor.* | cut -f2 -d/ | tail -1)
  fi
  if [[ ! -f kernel/$kcfg ]] ; then
    kcfg=$(ls kernel/config-* | cut -f2 -d/ | tail -1)
  fi

  if [[ -z $opt_no_config ]] ; then
    trace "installing config: $kcfg"
    cp kernel/$kcfg build/kernel/linux-$_quiz_ksrcver/.config
  else
    trace "NOT installing config as requested"
  fi

  pushd build/kernel/linux-$_quiz_ksrcver > /dev/null

  if [[ -n $opt_modify_config ]] ; then
    trace "updating config from commandline switches"
    scripts/config $opt_modify_config
  fi

  trace "compiling config: $_quiz_ksrcver"

  make olddefconfig $makeopts

  if [[ -z $opt_no_build ]] ; then
    trace "building kernel: $_quiz_ksrcver"
    make -j5 $makeopts
  else
    trace "NOT building kernel as requested"
  fi

  popd > /dev/null

  if [[ -n $opt_update_config ]] ; then
    trace "updating standard config: $kcfg"
    cp build/kernel/linux-$_quiz_ksrcver/.config kernel/$kcfg
  fi

  if [[ -z $opt_no_build ]] ; then
    trace "moving completed kernel into quiz system dir: $_quiz_kver"

    mkdir -p system
    echo cp build/kernel/linux-$_quiz_ksrcver/arch/x86/boot/bzImage system/bzImage-$_quiz_kver
  fi

  trace "build finished: $_quiz_kver"
done

# vim: ft=bash
