#!/usr/bin/env bash

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# Copyright (c) 2023, Rob Norris <robn@despairlabs.com>

set -uo pipefail

usage() {
  cat <<EOF
spin up a VM, run a program in it, tear it down again
usage: quiz [opts] [program [args...]]

options:
  -p <profile,...>
        list of profiles to include in this run
  -a <arch>
        architecture to use for this run
  -k <kernel>
        kernel to use for this run
  -r <runcontrol>
        use the given runcontrol (default: auto)
  -S    drop into shell after run script completes
  -h    this help
EOF
  exit 1
}

trace() {
  local STAMP=$(date +%Y%m%d-%H:%M:%S)
  echo "[quiz] $STAMP $@" >&2
}

fail() {
  local TEXT=${@:-}
  if [[ -z $TEXT ]] ; then
    TEXT="[${BASH_SOURCE[0]}:${BASH_LINENO[0]}: $BASH_COMMAND]"
  fi
  trace "FATAL $TEXT"
  exit 1
}
trap fail ERR

RUNDIR=$(realpath $(dirname $0))
source $RUNDIR/quiz-config
source $RUNDIR/quiz-lib

opt_arch=""
opt_kernel=""
opt_profile="$QUIZ_PROFILE"
opt_shell=""
opt_rc="${QUIZ_RC:-auto}"

OPTIND=1
while getopts "a:k:p:Sr:h" opt
do
  case "$opt" in
    'a') opt_arch=$OPTARG ;;
    'k') opt_kernel=$OPTARG ;;
    'p') opt_profile=$OPTARG ;;
    'S') opt_shell=1 ;;
    'r') opt_rc=$OPTARG ;;
    'h') usage ;;
    *) exit 1 ;;
  esac
done
shift $(expr $OPTIND - 1)

quiz_arch_vars ${opt_arch:-$QUIZ_ARCH}
quiz_debian_vars
quiz_kernel_best_available ${opt_kernel:-$QUIZ_KERNEL_VERSION}

# create init dir and install second stage
rm -rf $RUNDIR/system/init
mkdir -p $RUNDIR/system/init/.quiz
install -m 755 init/init2 $RUNDIR/system/init/.quiz/init2

# rc selection
rc=$opt_rc
if [[ $opt_rc = "auto" ]] ; then
  rc=raw
  if [[ -t 1 ]] ; then
    rc=tmux
  fi
fi
if [[ ! -d $RUNDIR/rc/$rc ]] ; then
  fail "unknown rc: $rc"
fi
trace "using rc: $rc"
rsync -a $RUNDIR/rc/$rc/ $RUNDIR/system/init/.quiz/rc

# XXX ensure user dir exists
mkdir -p $RUNDIR/system/user

# delete profile file insertions from previous runs
# XXX maybe these should be part of .quiz and in the overlay
find profile/*/etc -type f | cut -d/ -f3- | \
  awk "{ print \"$RUNDIR/system/work/\" \$1 }" | \
  xargs rm -f

# get profiles set up. source the profile setup here, and build a profile init
# to be run right before we exec into the real program
profiles=$(echo $opt_profile | sed 's/,/ /g' | xargs -n1 | sort | xargs)
if [[ $profiles ]] ; then
  for v in ${!QUIZ_@} ; do
    echo "$v=${!v@Q}" >> $RUNDIR/system/init/.quiz/init.profile
  done
fi
for p in $profiles ; do
  if [[ ! -d $RUNDIR/profile/$p ]] ; then
    fail "unknown profile: $p"
  fi
  trace "including profile: $p"

  if [[ -f $RUNDIR/profile/$p/setup ]] ; then
    source $RUNDIR/profile/$p/setup
  fi

  if [[ -f $RUNDIR/profile/$p/init ]] ; then
    echo "echo 'quiz: starting profile init: $p' >> /dev/kmsg" \
      >> $RUNDIR/system/init/.quiz/init.profile
    cat $RUNDIR/profile/$p/init >> $RUNDIR/system/init/.quiz/init.profile
  fi

  # insert profile-specific files into /etc and /usr/local
  # XXX maybe these should be part of .quiz and in the overlay
  if [[ -d $RUNDIR/profile/$p/etc ]] ; then
    rsync -a $RUNDIR/profile/$p/etc/ $RUNDIR/system/work/etc/
  fi
  if [[ -d $RUNDIR/profile/$p/local ]] ; then
    rsync -a $RUNDIR/profile/$p/local/ $RUNDIR/system/work/usr/local/
  fi
done

# set up a run script for init to execute
trace "creating run script"
rm -f $RUNDIR/system/init/.quiz/run
if [[ $# -ne 0 ]] ; then
  cat <<EOF > $RUNDIR/system/init/.quiz/run
echo "quiz: starting user program" >> /dev/kmsg
$@
EOF
  if [[ $opt_shell ]] ; then
    cat <<EOF >> $RUNDIR/system/init/.quiz/run
echo "quiz: user program done, dropping to shell" >> /dev/kmsg
exec /bin/bash
EOF
  fi
else
  cat <<EOF > $RUNDIR/system/init/.quiz/run
echo "quiz: starting shell" >> /dev/kmsg
/bin/bash
EOF
fi
chmod +x $RUNDIR/system/init/.quiz/run

# build environment file
cat <<EOF > $RUNDIR/system/init/.quiz/env
export QUIZ_ARCH=$_quiz_arch
export QUIZ_KERNEL_VERSION=$_quiz_kver
export QUIZ_PROFILES="$profiles"

#for p in \$QUIZ_PROFILES ; do
#  for d in /opt/\$p/bin /opt/\$p/sbin ; do
#    if [ -d \$d ] ; then
#      PATH="\$d:\$PATH"
#    fi
#  done
#done
#export PATH
export PATH="\$PATH:/usr/local/sbin:/usr/sbin:/sbin"
EOF

trace "starting microvm"

#
# XXX note to self. every time I've tried to change the console type to
#     something else to get better support for acting like a true terminal, its
#     failed. Ultimately, they all have basically no smarts at all, and are all
#     harder to access from the host than stdio (at least in the transient way
#     I want to). Don't bother.
#
#     The key to every UI pleasantry has been to allocate a pseudo-terminal
#     inside and build off of that. I think that SIGWINCH passthrough is the
#     only true missing piece at this point, and then all would be well.
#       -- robn, 2025-01-09
#

qemu_bin=qemu-system-$_quiz_arch_qemu
qemu_machine_opts=""
qemu_cpu_opts=""
case "$_quiz_arch_qemu" in
  x86_64)
    # XXX I think microvm only works for native CPUs, but I need to test more
    qemu_machine_opts="-machine microvm,x-option-roms=off,pit=off,pic=off,rtc=off,isa-serial=off,pcie=on"
    qemu_cpu_opts="-cpu qemu64"
    ;;
  ppc64)
    qemu_machine_opts="-machine ppce500"
    qemu_cpu_opts="-cpu e6500"
    ;;
esac

if [[ -n $_quiz_arch_native ]] ; then
  qemu_cpu_opts="-cpu host -enable-kvm"
fi

qemu_mem=${QUIZ_MEM:-2G}
qemu_cpus=${QUIZ_CPUS:-2}

$qemu_bin $qemu_machine_opts $qemu_cpu_opts \
  -m $qemu_mem -smp $qemu_cpus \
  -kernel $_quiz_kernel_image \
    -append "console=hvc0 root=/dev/vda ro reboot=t $QUIZ_KERNEL_OPTS" \
  -nodefaults -no-user-config -nographic \
  -chardev stdio,mux=on,signal=off,id=virtiocon0 \
  -mon chardev=virtiocon0,mode=readline \
  -device virtio-serial-pci \
  -device virtconsole,chardev=virtiocon0 \
  -device virtio-balloon-pci \
  -device pvpanic-pci \
  -drive id=root,file=$RUNDIR/system/$_quiz_debian_release.$_quiz_debian_arch.ext2,format=raw,read-only=on,if=none \
  -device virtio-blk-pci,drive=root,serial=root \
  -fsdev local,id=quiz-init,path=$RUNDIR/system/init,security_model=none,readonly=on \
  -device virtio-9p-pci,fsdev=quiz-init,mount_tag=quiz-init \
  -fsdev local,id=quiz-kernel,path=$RUNDIR/system/kernel/$_quiz_arch_kernel,security_model=none,readonly=on \
  -device virtio-9p-pci,fsdev=quiz-kernel,mount_tag=quiz-kernel \
  -fsdev local,id=quiz-system,path=$RUNDIR/system/work,security_model=none,readonly=on \
  -device virtio-9p-pci,fsdev=quiz-system,mount_tag=quiz-system \
  -fsdev local,id=quiz-user,path=$RUNDIR/system/user,security_model=none,readonly=on \
  -device virtio-9p-pci,fsdev=quiz-user,mount_tag=quiz-user \
  $QUIZ_QEMU_OPTS \

trace "done"

# vim: ft=bash
